import asyncio
import datetime
import logging
import os
from datetime import timedelta
import urllib.parse
from logging.handlers import RotatingFileHandler

import aiohttp
import telebot
from scheduler.asyncio import Scheduler
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from telebot.util import user_link
from marzban import MarzbanAPI, UserCreate, UserModify, ProxySettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO').upper()
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOG_DIR = '/var/log'
LOG_MAX_BYTES = 10 * 1024 * 1024  # 10 MB
LOG_BACKUP_COUNT = 5

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(LOG_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.setLevel(LOG_LEVEL)

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter(LOG_FORMAT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–æ–≥–æ–≤
info_handler = RotatingFileHandler(
    os.path.join(LOG_DIR, 'bot.log'),
    maxBytes=LOG_MAX_BYTES,
    backupCount=LOG_BACKUP_COUNT,
    encoding='utf-8'
)
info_handler.setFormatter(formatter)
info_handler.setLevel(logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
error_handler = RotatingFileHandler(
    os.path.join(LOG_DIR, 'bot.err.log'),
    maxBytes=LOG_MAX_BYTES,
    backupCount=LOG_BACKUP_COUNT,
    encoding='utf-8'
)
error_handler.setFormatter(formatter)
error_handler.setLevel(logging.ERROR)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(info_handler)
logger.addHandler(error_handler)

# –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(LOG_LEVEL)
logger.addHandler(console_handler)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
target_channel = int(os.environ['TARGET_CHANNEL'])
check_cooldown = int(os.environ['CHECK_COOLDOWN'])
panel_username = os.environ['PANEL_USERNAME']
panel_pass = os.environ['PANEL_PASS']
panel_address = os.environ['PANEL_ADDRESS']
bot_token = os.environ['BOT_TOKEN']
proxy_domain = os.environ['PROXY_DOMAIN']
proxy_port = os.environ['PROXY_PORT']
admin_ids = [int(id.strip()) for id in os.environ.get('ADMIN_ID', '').split(',') if id.strip()]
SUPPORT_CHAT_ID = int(os.environ.get('SUPPORT_CHAT_ID', 0))  # ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_BOT_USERNAME = os.environ.get('SUPPORT_BOT_USERNAME', '')  # Username –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
logger.info(f"SUPPORT_CHAT_ID: {SUPPORT_CHAT_ID}")
logger.info(f"SUPPORT_BOT_USERNAME: {SUPPORT_BOT_USERNAME}")
logger.info(f"ADMIN_IDS: {admin_ids}")

# –°–ª–æ–≤–∞—Ä—å —Å URL-—Å—Ö–µ–º–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
APP_URL_SCHEMES = {
    'ios': {
        'streisand': 'streisand://import/{url}#{name}',
        # 'karing': 'karing://install-config?url={url}&name={name}',  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ URL-—Å—Ö–µ–º—É –¥–ª—è Karing
        'foxray': 'foxray://yiguo.dev/sub/add/?url={url}#{name}',
        'v2box': 'v2box://install-sub?url={url}&name={name}',
        'singbox': 'sing-box://import-remote-profile?url={url}#{name}'
    },
    'android': {
        'v2rayng': 'v2rayng://install-sub?url={url}&name={name}',
        'hiddify': 'hiddify://install-config/?url={url}'
    },
    'pc': {
        'hiddify': 'hiddify://install-config/?url={url}'
    }
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
APP_DOWNLOAD_LINKS = {
    'ios': {
        'streisand': 'https://apps.apple.com/app/streisand/id6450534064',
        'karing': 'https://apps.apple.com/app/karing/id6472431552',
        'foxray': 'https://apps.apple.com/app/foxray/id6448898396',
        'v2box': 'https://apps.apple.com/app/v2box/id6446814690',
        # 'singbox': 'https://apps.apple.com/app/sing-box/id6450509028',
        'shadowrocket': 'https://apps.apple.com/app/shadowrocket/id932747118',
        'happ': 'https://apps.apple.com/app/happ-proxy-utility/id6504287215'
    },
    'android': {
        'v2rayng': 'https://play.google.com/store/apps/details?id=com.v2ray.ang',
        'hiddify': 'https://play.google.com/store/apps/details?id=app.hiddify.com',
        'V2RayTun': 'https://play.google.com/store/apps/details?id=com.v2raytun.android',
    },
    'pc': {
        'hiddify': 'https://apps.microsoft.com/store/detail/hiddify-next/9N2B0K8Z5Z5F',
        'v2rayN': 'https://github.com/2dust/v2rayN/releases/latest',
        'karing': 'https://github.com/KaringX/karing/releases/latest'
    }
}

async def generate_app_specific_link(base_url: str, system: str, app: str, user_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä."""
    if system not in APP_URL_SCHEMES or app not in APP_URL_SCHEMES[system]:
        return base_url
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    proxy_url = f"https://{proxy_domain}:{proxy_port}/redirect/{system}/{app}"
    
    # –î–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    return f"{proxy_url}?url={base_url}&name={user_name}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –±–æ—Ç–∞
api = MarzbanAPI(base_url=panel_address)
bot = AsyncTeleBot(bot_token)
bot.user_data = {}
# panel = Marzban(panel_username, panel_pass, panel_address)

@bot.message_handler(commands=['vpn', 'start'])
async def vpn_message(message):
    if message.chat.type != 'private':
        return
    tg_user_id = message.from_user.id
    tg_user = await check_user_in_channel(tg_user_id)
    welcome_message = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_link(message.from_user)}!\n\n"
    
    if tg_user:
        sub_link = await get_marzban_sub_url(tg_user_id, tg_user.user.full_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.user_data[message.from_user.id] = {'sub_link': sub_link}
        
        welcome_message += """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ SubVPN!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:
‚Ä¢ üì± iOS/MacOS
‚Ä¢ ü§ñ Android
‚Ä¢ üíª Windows

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN.

‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üì± iOS/MacOS", callback_data="platform_ios"),
            types.InlineKeyboardButton("ü§ñ Android", callback_data="platform_android"),
            types.InlineKeyboardButton("üíª PC", callback_data="platform_pc")
        )
        markup.add(types.InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"))
        
        await bot.send_message(
            message.chat.id, 
            text=welcome_message, 
            reply_markup=markup, 
            parse_mode='HTML'
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        keyboardmain = types.InlineKeyboardMarkup()
        keyboardmain.add(types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—É—Å—Ç–∏', url="https://boosty.to/mob5ter"))
        keyboardmain.add(types.InlineKeyboardButton(text='üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data="support"))
        welcome_message = f"""‚ùå –£–ø—Å! –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à Boosty
2. –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É Boosty
3. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É

–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        await bot.send_message(message.chat.id, text=welcome_message, reply_markup=keyboardmain, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('platform_'))
async def handle_platform_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    if call.message.chat.type != 'private':
        return
    platform = call.data.split('_')[1]
    platform_names = {
        'ios': 'iOS/MacOS',
        'android': 'Android',
        'pc': 'PC'
    }
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    markup = types.InlineKeyboardMarkup(row_width=2)
    for app in APP_DOWNLOAD_LINKS[platform].keys():
        markup.add(types.InlineKeyboardButton(
            text=app.capitalize(),
            callback_data=f"app_{platform}_{app}"
        ))
    markup.add(types.InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_menu"))
    
    await bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {platform_names[platform]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('app_'))
async def handle_app_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    if call.message.chat.type != 'private':
        return
    _, platform, app = call.data.split('_')
    app_name = app.capitalize()
    
    if call.from_user.id not in bot.user_data or 'sub_link' not in bot.user_data[call.from_user.id]:
        await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    base_url = bot.user_data[call.from_user.id]['sub_link']
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    message_text = f"üì± {app_name}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    download_link = APP_DOWNLOAD_LINKS[platform][app]
    message_text += f"üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {download_link}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º markup –≤ –Ω–∞—á–∞–ª–µ
    markup = types.InlineKeyboardMarkup()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL-—Å—Ö–µ–º–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if platform in APP_URL_SCHEMES and app in APP_URL_SCHEMES[platform]:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
        app_link = await generate_app_specific_link(
            base_url,
            platform,
            app,
            f"SubVPN_{call.from_user.id}"
        )
        message_text += f"üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        markup.add(types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", url=app_link))
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if app == 'V2RayTun':
            message_text += f"""‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ {app_name}:

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É" –Ω–∏–∂–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name}
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "+" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
4. –í—ã–±–µ—Ä–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è" –∏–ª–∏ "Start"."""
            markup.add(types.InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É", url=base_url))
        elif app == 'v2rayN':
            message_text += f"""‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ {app_name}:

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É" –Ω–∏–∂–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë

2. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ V2RayN –Ω–∞–∂–º–∏—Ç–µ ¬´–°–µ—Ä–≤–µ—Ä–∞¬ª ‚Üí ¬´–ò–º–ø–æ—Ä—Ç –º–∞—Å—Å–∏–≤–∞ URL –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.

3. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì—Ä—É–ø–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏¬ª ‚Üí ¬´–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏¬ª. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π.

4. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN:
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ª–æ–∫–∞—Ü–∏—é, –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –Ω–µ–π –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä¬ª.
   ‚Ä¢ –í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ¬´–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏¬ª –≤ —Ä–µ–∂–∏–º ¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏¬ª. –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –∫—Ä–∞—Å–Ω—É—é - –∑–Ω–∞—á–∏—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
   ‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ ¬´–†–µ–∂–∏–º VPN¬ª –≤ –∫–ª–∏–µ–Ω—Ç–µ. –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ¬´–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏¬ª –≤–Ω–∏–∑—É.

–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π VPN.

‚ÑπÔ∏è –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è VPN:
   ‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ¬´–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏¬ª –Ω–∞ ¬´–û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏¬ª
   ‚Ä¢ –í—ã–∫–ª—é—á–∏—Ç–µ ¬´–†–µ–∂–∏–º VPN¬ª."""
            markup.add(types.InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É", url=base_url))
        elif app == 'karing':
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if platform == 'android':
                message_text += f"""üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ APK-—Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é APK-—Ñ–∞–π–ª–∞

"""
            elif platform == 'pc':
                message_text += f"""üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –æ—Ç –∏–º–µ–Ω–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

"""
            elif platform == 'ios':
                message_text += f"""üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ App Store –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ

"""

            message_text += f"""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "Karing"
2. –°–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
3. –í —Ä–∞–∑–¥–µ–ª–µ "–Ø–∑—ã–∫" –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ "Next"
4. –í —Ä–∞–∑–¥–µ–ª–µ "–°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω" –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è", –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ"
5. –í —Ä–∞–∑–¥–µ–ª–µ "–®–∞–±–ª–æ–Ω—ã –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª" –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª—å—à–µ"
6. –í —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞" –æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–†–µ–∂–∏–º –Ω–æ–≤–∏—á–∫–∞" –≤–∫–ª—é—á–µ–Ω–Ω—ã–º, –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"

üîó –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É" –Ω–∏–∂–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë
2. –í —Ä–∞–∑–¥–µ–ª–µ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"
3. –í–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –∏ "–û–∫" –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ
4. –í—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É

üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è:
1. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –±–æ–ª—å—à–æ–π –∫–Ω–æ–ø–∫–∏"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if platform == 'pc':
                message_text += f"""
2. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –Ω–∞ Windows:
   ‚Ä¢ –ü–æ–∑–≤–æ–ª—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏
   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–ì–ª–æ–±–∞–ª—å–Ω–æ":
     ‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞" - —á–µ—Ä–µ–∑ –í–ü–ù –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
     ‚Ä¢ "–ì–ª–æ–±–∞–ª—å–Ω–æ" - —á–µ—Ä–µ–∑ –í–ü–ù –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
            elif platform == 'ios':
                message_text += f"""
2. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ:
   ‚Ä¢ –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –í–ü–ù-–ø—Ä–æ—Ñ–∏–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–ì–ª–æ–±–∞–ª—å–Ω–æ":
     ‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞" - —á–µ—Ä–µ–∑ –í–ü–ù –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
     ‚Ä¢ "–ì–ª–æ–±–∞–ª—å–Ω–æ" - —á–µ—Ä–µ–∑ –í–ü–ù –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS/MacOS
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "VPN –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"
   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å Karing –∏ –Ω–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ
   ‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Karing"""
            else:  # android
                message_text += f"""
2. –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∞–≤–∏–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–ì–ª–æ–±–∞–ª—å–Ω–æ":
   ‚Ä¢ "–ü—Ä–∞–≤–∏–ª–∞" - —á–µ—Ä–µ–∑ –í–ü–ù –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
   ‚Ä¢ "–ì–ª–æ–±–∞–ª—å–Ω–æ" - —á–µ—Ä–µ–∑ –í–ü–ù –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
            
            markup.add(types.InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É", url=base_url))
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            message_text += f"""‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ {app_name}:

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É" –Ω–∏–∂–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name}
3. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ò–º–ø–æ—Ä—Ç" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
4. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
6. –í–∫–ª—é—á–∏—Ç–µ VPN

‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
            markup.add(types.InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é —Å—Å—ã–ª–∫—É", url=base_url))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", callback_data=f"platform_{platform}"))
    markup.add(types.InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_menu"))
    
    await bot.edit_message_text(
        message_text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "refresh_menu")
async def handle_refresh_menu(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."""
    if call.message.chat.type != 'private':
        return
    tg_user_id = call.from_user.id
    tg_user = await check_user_in_channel(tg_user_id)
    welcome_message = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_link(call.from_user)}!\n\n"
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if call.from_user.id in bot.user_data:
        bot.user_data[call.from_user.id]['in_support'] = False
    
    if tg_user:
        sub_link = await get_marzban_sub_url(tg_user_id, tg_user.user.full_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.user_data[call.from_user.id] = {'sub_link': sub_link}
        
        welcome_message += """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-–±–æ—Ç SubVPN!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:
‚Ä¢ üì± iOS/MacOS
‚Ä¢ ü§ñ Android
‚Ä¢ üíª Windows

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN.

‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üì± iOS/MacOS", callback_data="platform_ios"),
            types.InlineKeyboardButton("ü§ñ Android", callback_data="platform_android"),
            types.InlineKeyboardButton("üíª PC", callback_data="platform_pc")
        )
        markup.add(types.InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await bot.send_message(
            call.message.chat.id,
            welcome_message,
            reply_markup=markup,
            parse_mode='HTML'
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await bot.answer_callback_query(call.id)
    else:
        keyboardmain = types.InlineKeyboardMarkup()
        keyboardmain.add(types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—É—Å—Ç–∏', url="https://boosty.to/mob5ter"))
        keyboardmain.add(types.InlineKeyboardButton(text='üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data="support"))
        welcome_message = f"""‚ùå –£–ø—Å! –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à Boosty
2. –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É Boosty
3. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É

–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await bot.send_message(
            call.message.chat.id,
            welcome_message,
            reply_markup=keyboardmain,
            parse_mode='HTML'
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await bot.answer_callback_query(call.id)

async def update_listener(messages):
    for message in messages:
        try:
            if (message.content_type == 'new_chat_members' or message.content_type == 'left_chat_member') and int(message.chat.id) == target_channel:
                await bot.delete_message(message.chat.id, message.message_id)
            else:
                logger.debug(message)
        except Exception as e:
            logger.error(f"[TELEGRAM] ERROR update_listener:\n {e}")


async def get_marzban_sub_url(tg_user_id, tg_user_full_name):
    marzban_user = await check_user_marzban(tg_user_id)
    if marzban_user:
        logger.debug(f"[MARZBAN] USER FOUND\ntg: {tg_user_full_name} - Marzban: {marzban_user.username}")
        return marzban_user.subscription_url
    else:
        logger.debug(f"[MARZBAN] CREATING NEW USER\ntg: {tg_user_full_name} - Marzban: SUB_{tg_user_id}")
        marzban_new_user = await add_marzban_user(tg_user_id, tg_user_full_name)
        return marzban_new_user.subscription_url


async def check_user_in_channel(user_id):
    try:
        user = await bot.get_chat_member(chat_id=target_channel, user_id=user_id)
        if user.status in ['member', 'administrator', 'creator', 'restricted']:
            logger.debug(f"[TELEGRAM] USER FOUND\ntg: {user_id}-{user.user.full_name}")
            return user
    except telebot.asyncio_helper.ApiTelegramException as e:
        logger.warning(f"[TELEGRAM] ApiTelegramException check_user_in_channel:\nuser_id:{user_id}\n{e}")
        pass
    except Exception as e:
        logger.error(f"[TELEGRAM] ERROR check_user_in_channel:\n {e}")
        pass
    return False


async def check_user_marzban(tg_id):
    try:
        marzban_token = await api.get_token(username=panel_username, password=panel_pass)
        user = await api.get_user(username=f"SUB_{tg_id}", token=marzban_token.access_token)
        logger.debug(f"[MARZBAN] USER FOUND: SUB_{tg_id}-{user.note}")
        return user
    except aiohttp.client_exceptions.ClientResponseError as e:
        logger.warning(f"[MARZBAN] NOT FOUND OR ERROR check_user_marzban: {e}")
        return False
    except Exception as e:
        logger.warning(f"[MARZBAN] NOT FOUND OR ERROR check_user_marzban: {e}")
        return False


async def add_marzban_user(tg_id, tg_name):
    try:
        marzban_token = await api.get_token(username=panel_username, password=panel_pass)
        sub_date = datetime.datetime.today() + timedelta(days=31)
        new_user = UserCreate(username=f"SUB_{tg_id}",
                                              note=f"{tg_name}",
                                              proxies={
                                                  "vless": ProxySettings(flow="xtls-rprx-vision")                                                  
                                              },
                                              expire= int(sub_date.timestamp()),                                            
                                              status="active",
                                              inbounds={
                                                  "vless": [
                                                      "VLESS TCP REALITY"
                                                  ]
                                              })
        # print(new_user)
        user = await api.add_user(user=new_user, token=marzban_token.access_token)

        logging.info(f"[MARZBAN] USER CREATED: SUB_{tg_id}-{user.note}")
        return user
    except Exception as e:
        logging.warning(f"[MARZBAN] ERROR add_marzban_user: {e}")
        return False


async def check_tg_and_recharge():
    logger.debug("CHECK FOR EXPIRED USERS")
    marzban_token = await api.get_token(username=panel_username, password=panel_pass)
    users = await api.get_users(token=marzban_token.access_token)
    try:
        for item in users.users:
            if item.status == 'expired' and "SUB_" in item.username:
                # print(item.username + " " + item.status)


                tg_user_id = str(item.username).replace("SUB_", "")
                user = await check_user_in_channel(user_id=int(tg_user_id))
                if user:
                    # print(user.user.full_name, user.status
                    sub_date = datetime.datetime.today() + timedelta(days=31)

                    await api.modify_user(username=f"SUB_{tg_user_id}", user=UserModify(username=f"SUB_{tg_user_id}",
                                                                                         note=f"{user.user.full_name}",
                                                                                         proxies=item.proxies,
                                                                                         data_limit=0,
                                                                                         expire=int(sub_date.timestamp()),
                                                                                         data_limit_reset_strategy="no_reset",
                                                                                         status="active",
                                                                                         inbounds={
                                                                                             "vless": [
                                                                                                 "VLESS TCP REALITY"
                                                                                             ]
                                                                                         }), token=marzban_token.access_token)
                    #await panel.reset_user_traffic(user_username=f"SUB_{tg_user_id}", token=mytoken)
                    logger.info(f"[MARZBAN] user SUB_{tg_user_id} - {user.user.full_name} has been recharged")
                else:
                    logger.debug(f"[MARZBAN] user SUB_{tg_user_id} not found in channel")
                    if datetime.datetime.now() - datetime.datetime.fromtimestamp(item.expire) > timedelta(days=30):
                        await api.remove_user(username=item.username, token=marzban_token.access_token)
                        logger.info(f"[MARZBAN] USER EXPIRED FOR 30 DAYS AND DELETED : {item.username}")
    except Exception as e:
        logger.warning(f"[MARZBAN] ERROR check_tg_and_recharge:\n {e}")


async def main():
    
    chat = await bot.get_chat(target_channel)
    bot.set_update_listener(update_listener)
    logger.info(f"[INIT]BOT STARTED for {chat.title}")
    telebot.apihelper.RETRY_ON_ERROR = True
    await asyncio.gather(bot.infinity_polling(
        allowed_updates=['message', 'edited_message', 'channel_post', 'edited_channel_post', 'inline_query',
                         'chosen_inline_result', 'callback_query', 'shipping_query', 'pre_checkout_query', 'poll',
                         'poll_answer', 'my_chat_member', 'chat_member', 'chat_join_request', 'message_reaction',
                         'message_reaction_count', 'chat_boost', 'removed_chat_boost', 'business_connection',
                         'business_message', 'edited_business_message', 'deleted_business_messages']), schedule_task())


async def schedule_task():
    loop = asyncio.get_running_loop()
    schedule = Scheduler(loop=loop)
    schedule.once(datetime.timedelta(seconds=10), check_tg_and_recharge)
    schedule.cyclic(datetime.timedelta(minutes=check_cooldown), check_tg_and_recharge)

    while True:
        await asyncio.sleep(2)


async def send_message_to_all_users(message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."""
    try:
        marzban_token = await api.get_token(username=panel_username, password=panel_pass)
        users = await api.get_users(token=marzban_token.access_token)
        
        for user in users.users:
            if user.status == 'active' and "SUB_" in user.username:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –∏–∑ username
                    tg_user_id = int(user.username.replace("SUB_", ""))
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID: {user.username}")
                    continue
                    
                try:
                    await bot.send_message(
                        chat_id=tg_user_id,
                        text=message_text,
                        parse_mode='HTML'
                    )
                    logger.info(f"[BROADCAST] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_user_id}")
                except Exception as e:
                    logger.error(f"[BROADCAST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_user_id}: {e}")
                    continue
                    
        logger.info("[BROADCAST] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"[BROADCAST] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

@bot.message_handler(commands=['broadcast'])
async def broadcast(message: types.Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if str(message.from_user.id) not in admin_ids:
        await bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = message.text.replace('/broadcast', '').strip()
    if not broadcast_text:
        await bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_message = await bot.reply_to(message, "üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await send_message_to_all_users(f"{broadcast_text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    await bot.edit_message_text(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        chat_id=message.chat.id,
        message_id=progress_message.message_id
    )

@bot.message_handler(commands=['support'])
async def cmd_support(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    if message.chat.type != 'private':
        return
        
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /support –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–¢–µ–∫—É—â–∏–π SUPPORT_CHAT_ID: {SUPPORT_CHAT_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    try:
        chat = await bot.get_chat(SUPPORT_CHAT_ID)
        logger.info(f"–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–π–¥–µ–Ω: {chat.title} (ID: {chat.id})")
        await bot.reply_to(
            message,
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(e)}")
        await bot.reply_to(
            message,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(func=lambda message: message.chat.type == 'private' and message.chat.id != SUPPORT_CHAT_ID)
async def forward_to_support(message: types.Message):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    if not message.text and not message.photo and not message.video and not message.document:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if message.from_user.id not in bot.user_data or not bot.user_data[message.from_user.id].get('in_support'):
        return
            
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    logger.info(f"–¢–µ–∫—É—â–∏–π SUPPORT_CHAT_ID: {SUPPORT_CHAT_ID}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        chat = await bot.get_chat(SUPPORT_CHAT_ID)
        logger.info(f"–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–π–¥–µ–Ω: {chat.title} (ID: {chat.id})")
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.forward_message(
            chat_id=SUPPORT_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.reply_to(
            message,
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(e)}")
        logger.error(f"ID —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {SUPPORT_CHAT_ID}")
        logger.error(f"ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {message.from_user.id}")
        await bot.reply_to(
            message,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(func=lambda message: message.chat.id == SUPPORT_CHAT_ID)
async def handle_support_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message and message.reply_to_message.forward_from:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id = message.reply_to_message.forward_from.id
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üí¨ –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="support"))
            markup.add(types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_menu"))
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            if message.photo:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                caption = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.caption if message.caption else ''}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
                await bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=caption,
                    reply_markup=markup
                )
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ
            elif message.video:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                caption = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.caption if message.caption else ''}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
                await bot.send_video(
                    chat_id=user_id,
                    video=message.video.file_id,
                    caption=caption,
                    reply_markup=markup
                )
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç
            elif message.document:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
                caption = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.caption if message.caption else ''}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
                await bot.send_document(
                    chat_id=user_id,
                    document=message.document.file_id,
                    caption=caption,
                    reply_markup=markup
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=markup
                )
            await bot.reply_to(message, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            logger.error(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(e)}")
            await bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "support")
async def handle_support_button(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    if call.message.chat.type != 'private':
        return
        
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    logger.info(f"–¢–µ–∫—É—â–∏–π SUPPORT_CHAT_ID: {SUPPORT_CHAT_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    try:
        chat = await bot.get_chat(SUPPORT_CHAT_ID)
        logger.info(f"–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–π–¥–µ–Ω: {chat.title} (ID: {chat.id})")
        await bot.answer_callback_query(call.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if call.from_user.id not in bot.user_data:
            bot.user_data[call.from_user.id] = {}
        bot.user_data[call.from_user.id]['in_support'] = True
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_menu"))
        
        await bot.send_message(
            call.message.chat.id,
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {str(e)}")
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            call.message.chat.id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

asyncio.run(main())
